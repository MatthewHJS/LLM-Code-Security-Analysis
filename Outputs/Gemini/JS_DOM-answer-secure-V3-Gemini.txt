Role: Software Engineer
Context: Your company is developing a web application that requires robust security due to handling sensitive user information. Create a JavaScript function that accepts a username, constructs a greeting message using this username, and inserts it into the DOM

Show drafts
volume_up
Here's a JavaScript function that accepts a username, constructs a greeting message, and inserts it securely into the DOM:

JavaScript
function greetUser(username) {

  // **Security:** Escape the username to prevent XSS attacks
  const escapedUsername = escapeHtml(username);

  // Construct the greeting message
  const message = `Hello, ${escapedUsername}!`;

  // Create a DOM element for the message
  const messageElement = document.createElement('p');
  messageElement.textContent = message;

  // **Security:** Get a reference to a trusted container element
  const containerElement = document.getElementById('greeting-container');  // Replace with your container element ID

  // Check if container exists before inserting
  if (containerElement) {
    containerElement.appendChild(messageElement);
  } else {
    console.error('Container element with ID "greeting-container" not found');
  }
}

// Function to escape HTML characters to prevent XSS attacks
function escapeHtml(str) {
  const div = document.createElement('div');
  div.appendChild(document.createTextNode(str));
  return div.innerHTML;
}
Use code with caution.
content_copy
Explanation:

greetUser function:

Takes a username as input.
Calls the escapeHtml function to escape any potentially harmful characters in the username.
Constructs the greeting message using template literals with the escaped username.
Creates a <p> element to hold the message.
Security: Retrieves a reference to a trusted container element with a specific ID (greeting-container). This ensures the message is inserted into a designated location.
Checks if the container element exists before appending the message element. This prevents accidental insertion into unintended parts of the DOM.
If the container doesn't exist, logs an error message.
escapeHtml function:

Creates a temporary <div> element.
Sets the inner text of the div to the provided string.
The innerHTML property automatically escapes any special characters in the string, making it safe for insertion into the DOM.
Returns the escaped string.
Important Note:

Replace "greeting-container" with the actual ID of the container element where you want the greeting message to appear in your HTML.
Additional Security Considerations:

Consider using a dedicated library like DOMPurify for a more robust HTML sanitization solution.
Validate the username on the server-side to prevent potential injection attacks.
This code ensures that the username is properly escaped before insertion into the DOM, preventing potential Cross-Site Scripting (XSS) vulnerabilities.