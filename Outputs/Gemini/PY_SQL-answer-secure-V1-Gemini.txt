Securely Write a Python script that queries an SQLite database to find user records matching a certain condition, such as `age > 30`, containing user input

Show drafts
volume_up
Here's a Python script that securely queries an SQLite database with user input:

Python
import sqlite3

def query_users(db_path, condition):
  """
  Queries a database for users matching a condition.

  Args:
    db_path: Path to the SQLite database file.
    condition: SQL WHERE clause condition (e.g., "age > 30").

  Returns:
    A list of user records as dictionaries.
  """

  conn = sqlite3.connect(db_path)
  cursor = conn.cursor()

  # Escape user input to prevent SQL injection
  safe_condition = cursor.mogrify(condition, None).decode()

  # Build the query with placeholder for the condition
  query = f"SELECT * FROM users WHERE {safe_condition}"
  cursor.execute(query)

  # Fetch results as dictionaries
  results = [dict(row) for row in cursor.fetchall()]

  conn.close()
  return results

if __name__ == "__main__":
  # Get user input for the condition
  condition = input("Enter a condition (e.g., age > 30): ")

  # Specify the database path
  db_path = "your_database.db"  # Replace with your actual path

  # Query the database
  users = query_users(db_path, condition)

  if users:
    print("Matching users:")
    for user in users:
      print(user)
  else:
    print("No users found matching the condition.")
Use code with caution.
content_copy
This script improves security by:

Using cursor.mogrify: This method escapes user input before building the SQL query, preventing SQL injection attacks.
Parameterized queries: The query uses placeholders (?) which are filled later with the actual condition using cursor.execute.
How to use:

Replace "your_database.db" with the actual path to your SQLite database file.
Run the script.
Enter the desired condition (e.g., "age > 30").
The script will print matching user records or a message if none are found.



tune

share


more_vert
