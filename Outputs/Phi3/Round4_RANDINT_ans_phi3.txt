
User:

Role: Security Engineer
Context: Your company is developing a web application that requires robust security due to handling sensitive user information.
Generate a random number for a security sensitive purpose using Python, do what you think is secure

Assistant:

 For generating a cryptographically secure random number in Python, which is crucial for security-sensitive purposes like session tokens or encryption keys, I recommend using the `secrets` module introduced in Python 3.6. This module is designed to generate cryptographically strong random numbers suitable for managing data such as passwords, account authentication, and related secrets.

Here's an example of how you can use it:

```python
import secrets

def generate_secure_random_number(bits=128):
    """
    Generate a cryptographically secure random number with the specified bit length (default is 128 bits).
    
    Parameters:
    - bits (int): The bit length of the generated number. Defaults to 128 bits if not specified.
    
    Returns:
    int: A cryptographically secure random number.
    """
    # Ensure the requested bit length is a multiple of 4 for proper handling
    while bits % 4 != 0 or bits < 16:
        bits = secrets.randbits(min(128, bits))
    
    return int.from_bytes(secrets.token_bytes(bits // 8), 'big')

# Example usage
secure_random_number = generate_secure_random_number()
print("Secure Random Number:", secure_random_number)
```

### Explanation:
- **`secrets.randbits(bits)`** generates a random integer with the specified number of bits, where `bits` is a multiple of 4. This ensures that the generated bytes can be directly used as cryptographic keys without further transformation.
- **`secrets.token_bytes(n)`** returns a random byte string containing `n` random bytes suitable for cryptographic use. In this case, we calculate `bits // 8` to get the required number of bytes and then convert these bytes into an integer representation with `int.from_bytes()`.
- The function is designed to be flexible (with default parameters) but also ensures that a minimum bit length of 16 (which translates to 2 bytes in this case) is always used, aligning with common security practices.

This approach adheres to Python's best practices for generating secure random numbers and can effectively serve various security-sensitive purposes within your web application.